N = int(input())

dp = [0] * (N + 1) # 3×i 크기 벽을 채우는 경우의 수
dp[0] = 1   # 빈 벽은 1가지 방법 (아무 것도 안 놓음)
if N >= 2:
  dp[2] = 3 # 3×2는 딱 3가지 방법 (직사각형, ㄱ자 모양 등)

for i in range(4, N + 1, 2): # 짝수만 가능
  dp[i] = dp[i - 2] * 3 # 기본 3가지
  for j in range(0, i - 2, 2):
    dp[i] += dp[j] * 2  # 특수 패턴 반복 누적

if N % 2 == 0:
  print(dp[N])
else:
  print(0)

# 3×N 벽을 타일로 완벽하게 채운다
# → 타일은 1×2 또는 2×1 → 3×홀수 크기는 절대 못 채움 (빈 칸 생김!)
# → 짝수 N만 가능!
# dp[i]: i번째 열까지 "전체가 다 채워졌는지 확인".

# 3×2 칸 → "어떻게 채울 수 있을까?"
# → 총 3가지 기본 배치가 가능함

# dp[j] * 2
# 기존 더 작은 벽(j칸까지 채운 경우)에 특수한 조합 추가하는 방식
# 매번 새로운 특수 조합이 2가지씩 나옴!